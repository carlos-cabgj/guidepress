{"version":3,"sources":["components/header/MainHeader.jsx","components/cards/ItemCardStyle.jsx","components/cards/CardSource.jsx","components/cards/CardSourceSetModal.jsx","services/Content/File.js","services/Content/Rss.js","components/cards/CardSourceUpModal.jsx","components/download/SourceContents.jsx","components/charts/ByWeek.jsx","components/charts/DataHours.jsx","components/charts/TfIdfByAll.jsx","components/charts/PostTime.jsx","components/charts/Comparison.jsx","components/charts/Tree.jsx","services/Ai/TfIdf.js","components/panel/CalcPanel.jsx","entities/EntityAbstract.jsx","entities/SourceEntity.js","components/panel/ConfigPanel.jsx","components/panel/TokenizacaoPanel.jsx","components/panel/FilteringAndSetPanel.jsx","pages/index/Home.jsx","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","grow","flexGrow","menuButton","marginRight","spacing","title","display","breakpoints","up","search","position","borderRadius","shape","backgroundColor","alpha","palette","common","white","marginLeft","width","searchIcon","padding","height","pointerEvents","alignItems","justifyContent","inputRoot","color","inputInput","paddingLeft","transition","transitions","create","sectionDesktop","sectionMobile","MainHeader","classes","React","useState","anchorEl","setAnchorEl","mobileMoreAnchorEl","setMobileMoreAnchorEl","isMenuOpen","Boolean","isMobileMenuOpen","handleMobileMenuClose","handleMenuClose","renderMenu","Menu","anchorOrigin","vertical","horizontal","id","keepMounted","transformOrigin","open","onClose","MenuItem","onClick","mobileMenuId","renderMobileMenu","IconButton","Badge","badgeContent","event","currentTarget","className","AppBar","Toolbar","Typography","variant","noWrap","ItemCardStyle","root","maxWidth","margin","imgChange","IOSSwitch","withStyles","switchBase","transform","opacity","border","thumb","track","grey","checked","focusVisible","props","Switch","focusVisibleClassName","disableRipple","CardSource","indice","sourceObj","handleOpenModal","handleOpenSetModal","handleUpdCard","item","setItem","useEffect","Card","CardContent","CardActionArea","component","get","ListItem","divider","Icon","style","fontSize","Button","Grid","container","xs","md","sm","moment","format","FormControlLabel","control","onChange","key","value","newItem","set","handleUpdConfig","target","name","label","modal","paper","background","boxShadow","shadows","CardSourceSetModal","statusModal","handleDownloadCard","handleDeleteCard","handleClose","setOpen","Modal","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","sendDownload","data","a","element","document","createElement","textFile","Blob","JSON","stringify","type","href","URL","createObjectURL","download","body","appendChild","click","getFeeds","inputFeed","feed","Axios","response","author","image","items","Date","getTime","CardSourceUpModal","rssLink","setTextRssLink","downloadFormat1","loadRssButton","Source","stripAllArray","array","replace","trim","noValidate","autoComplete","TextField","e","fullWidth","files","file","date","reader","FileReader","onload","contents","result","Parser","parseString","opc","rssParsed","d","description","getFullYear","getMonth","getDay","getHours","thumbColor","category","url","readAsText","loadFileRssContent","json","parse","loadCardContent","alert","gutterBottom","SourceContents","cardsInput","setCardsInput","openModalUpSource","setOpenModalUpSource","openModalSetSource","setOpenModalSetSource","indiceAtivo","setIndiceAtivo","newCards","splice","attrs","$item","handleOpenModalUpSource","map","card","index","fill","PlotByWeek","plotDataWeek","dataToPlot","months","daysColors","forEach","itemDay","push","x","y","marker","randomColor","luminosity","hue","layout","barmode","bargap","bargroupgap","plotTfIdfByWeek","plotDataHours","axis_x","Object","keys","hour","sort","b","indexDay","seed","config","responsive","xaxis","tickangle","line","yaxis","zeroline","plotTfIdfByHours","TfIdfByAll","plotDataAll","mode","useResizeHandler","plotTfIdfByAll","colorsHourPie","PostTime","plotDataPosttTime","obj","values","reverse","i","length","ksort","labels","hole","textinfo","textposition","automargin","colors","showlegend","plotPostTime","PlotComparison","similarityList","axis_y","idCard","showComparison","PlotTree","printNode","node","indexParent","vals","child","val","modelTree","model","makeTree","calcTfIDFFromTfCard","dataTreated","cardIndex","newResults","dataSet","tfidf","term","results","posItem","pubDate","categories","extractTfAllDocuments","configToken","propertyChoosed","termsCaseTreated","makeTokens","calcTf","addTermsToDictionary","chooseCategories","$field","join","terms","dictionary","words","tf","wordsLength","defineIdf","tfResults","wordsPerText","idf","qtdTexts","Math","log","args","text","fieldData","fieldDatawithoutInvisible","textCase","minLength","ngrams","choosedFieldFiltered","expression","RegExp","termsSplited","split","termsMinLength","toLowerCase","toUpperCase","stopWords","dataWithNgrams","applyNgrams","applyStopWords","finalData","arrayOfSplitedData","filter","newArray","newString","CalcPanel","setModelTree","configFilter","tfIdf","setTfIdf","setPlotDataWeek","setPlotDataHours","setPlotDataAll","setPlotDataPostTime","countWordsGenerated","setWordsGenerated","countWordsUsedtree","setWordsUsedtree","countWordsUsed","setWordsUsed","countDocuments","setCountDocuments","countFonts","setCountFonts","limitCount","setSimilarityList","calcAll","selectedWeek","minValueTfIdf","maxValueTfIdf","cutTfIdf","cutTreeData","counts","selectedAll","selectedHours","selectedPostsTime","cardTfIdf","slicedResults","slice","day","concat","percentCutTFIDF","idfCut","percentCutTree","treeCut","round","dataToTreeFirstSelected","z","dataToTree","getDayName","selectedAllWihtoutDuplicates","pos","arrayContent","calcDataTree","similarity","compareSources","num","console","dt","DecisionTree","require","countTrainable","randomIndex","currentIndex","floor","random","shuffle","percentTrain","training_data","test_data","accuracy","evaluate","modelInJson","toJSON","calcMagnitudeVector","vector","sqrt","reduce","acumulator","choosedSource","vectorFormat","cardChoosed","cardsToCompare","formatToDecript","cardsToCompareVector","docsWithVector","newVector","formatDocumentsWithVectors","unique","getVectorFormat","choosed","magnitude","vectorToCompare","listResults","itemChoosed","listFirstResult","vector1","magnitude1","vector2","product","vector1Item","indexVector1","magnitude2","calcCosSimilarity","mean","cards","targetField","dataCard","calcTfIdfCards","overflow","EntityAbstract","this","Component","SourceEntity","uuidv4","active","created","status","ConfigPanel","configInput","setConfigFilterCallback","setCardsSourceCallback","setConfigTokenCallback","setConfig","fileInfo","setFileData","qtdColsInfo","fillFileInfo","size","newConfig","loadFileConfig","sendBackUpToDownload","generateBackUpData","cardsData","rssHostDownload1","rssHostParam1","filesLimit","dropzoneText","showPreviews","acceptedFiles","showPreviewsInDropzone","align","Fragment","labelUp","typography","button","formControl","minWidth","selectEmpty","marginTop","TokenizacaoPanel","callbackLoadData","intl","useIntl","configs","setConfigs","newConfigs","inputProps","form","autocomplete","FormControl","Select","native","case","formatMessage","input","FilteringAndSetPanel","cardsSource","tree","setTree","checkedTypes","setCheckedTypes","setPercentTrain","downloadModelTree","toString","substr","handleTypeCheck","newTypes","handleBlur","utils","DateFnsUtils","locale","ptLocale","DateTimePicker","clearable","inputVariant","minDate","maxDate","types","Checkbox","renderSelectTypes","minItemPerCard","inputMode","pattern","options","targetCardForComparison","renderSimilarityCheck","FilledInput","endAdornment","InputAdornment","max","min","Slider","newValue","onChangeCommitted","Input","Number","onBlur","step","Home","setCardsSource","setConfigFilter","setConfigToken","objCollection","Divider","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","navigator","language","ReactDOM","render","StrictMode","messages","lang_pt_BR","getElementById"],"mappings":"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","file":"static/js/main.a1074f55.chunk.js","sourcesContent":["import React from 'react';\nimport { alpha, makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport Badge from '@material-ui/core/Badge';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Menu from '@material-ui/core/Menu';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport MailIcon from '@material-ui/icons/Mail';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport MoreIcon from '@material-ui/icons/MoreVert';\n\nconst useStyles = makeStyles((theme) => ({\n  grow: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    display: 'none',\n    [theme.breakpoints.up('sm')]: {\n      display: 'block',\n    },\n  },\n  search: {\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: alpha(theme.palette.common.white, 0.15),\n    '&:hover': {\n      backgroundColor: alpha(theme.palette.common.white, 0.25),\n    },\n    marginRight: theme.spacing(2),\n    marginLeft: 0,\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      marginLeft: theme.spacing(3),\n      width: 'auto',\n    },\n  },\n  searchIcon: {\n    padding: theme.spacing(0, 2),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  inputRoot: {\n    color: 'inherit',\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 0),\n    // vertical padding + font size from searchIcon\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n    transition: theme.transitions.create('width'),\n    width: '100%',\n    [theme.breakpoints.up('md')]: {\n      width: '20ch',\n    },\n  },\n  sectionDesktop: {\n    display: 'none',\n    [theme.breakpoints.up('md')]: {\n      display: 'flex',\n    },\n  },\n  sectionMobile: {\n    display: 'flex',\n    [theme.breakpoints.up('md')]: {\n      display: 'none',\n    },\n  },\n}));\n\nexport default function MainHeader() {\n  const classes = useStyles();\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [mobileMoreAnchorEl, setMobileMoreAnchorEl] = React.useState(null);\n\n  const isMenuOpen = Boolean(anchorEl);\n  const isMobileMenuOpen = Boolean(mobileMoreAnchorEl);\n\n  const handleProfileMenuOpen = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleMobileMenuClose = () => {\n    setMobileMoreAnchorEl(null);\n  };\n\n  const handleMenuClose = () => {\n    setAnchorEl(null);\n    handleMobileMenuClose();\n  };\n\n  const handleMobileMenuOpen = (event) => {\n    setMobileMoreAnchorEl(event.currentTarget);\n  };\n\n  const menuId = 'primary-search-account-menu';\n  const renderMenu = (\n    <Menu\n      anchorEl={anchorEl}\n      anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n      id={menuId}\n      keepMounted\n      transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n      open={isMenuOpen}\n      onClose={handleMenuClose}\n    >\n      <MenuItem onClick={handleMenuClose}>Profile</MenuItem>\n      <MenuItem onClick={handleMenuClose}>My account</MenuItem>\n    </Menu>\n  );\n\n  const mobileMenuId = 'primary-search-account-menu-mobile';\n  const renderMobileMenu = (\n    <Menu\n      anchorEl={mobileMoreAnchorEl}\n      anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n      id={mobileMenuId}\n      keepMounted\n      transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n      open={isMobileMenuOpen}\n      onClose={handleMobileMenuClose}\n    >\n      <MenuItem>\n        <IconButton aria-label=\"show 4 new mails\" color=\"inherit\">\n          <Badge badgeContent={4} color=\"secondary\">\n            <MailIcon />\n          </Badge>\n        </IconButton>\n        <p>Messages</p>\n      </MenuItem>\n      <MenuItem>\n        <IconButton aria-label=\"show 11 new notifications\" color=\"inherit\">\n          <Badge badgeContent={11} color=\"secondary\">\n            <NotificationsIcon />\n          </Badge>\n        </IconButton>\n        <p>Notifications</p>\n      </MenuItem>\n      <MenuItem onClick={handleProfileMenuOpen}>\n        <IconButton\n          aria-label=\"account of current user\"\n          aria-controls=\"primary-search-account-menu\"\n          aria-haspopup=\"true\"\n          color=\"inherit\"\n        >\n          <AccountCircle />\n        </IconButton>\n        <p>Profile</p>\n      </MenuItem>\n    </Menu>\n  );\n\n  return (\n    <div className={classes.grow}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography className={classes.title} variant=\"h6\" noWrap>\n            GuidePress\n          </Typography>\n\n          <div className={classes.grow} />\n          <div className={classes.sectionDesktop}>\n          </div>\n          <div className={classes.sectionMobile}>\n            <IconButton\n              aria-label=\"show more\"\n              aria-controls={mobileMenuId}\n              aria-haspopup=\"true\"\n              onClick={handleMobileMenuOpen}\n              color=\"inherit\"\n            >\n              <MoreIcon />\n            </IconButton>\n          </div>\n        </Toolbar>\n      </AppBar>\n      {renderMobileMenu}\n      {renderMenu}\n    </div>\n  );\n}","function ItemCardStyle(theme) {\n    return {\n        root: {\n            maxWidth: 295,\n            margin: 20,\n        },\n        imgChange: {\n            'object-fit' : 'contain',\n        },\n    }\n}\n\nexport default ItemCardStyle;","import React, {useEffect} from \"react\";\nimport {\n  Card, \n  CardActionArea, \n  CardContent, \n  Grid, \n  ListItem, \n  Switch,\n  withStyles,\n  makeStyles\n} from \"@material-ui/core\";\nimport Icon from '@material-ui/core/Icon';\n\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from '@material-ui/core/Button';\nimport moment from 'moment'\nimport ItemCardStyle from './ItemCardStyle.jsx';\nimport {FormattedMessage} from 'react-intl';\n\n\nconst useStyles = makeStyles((theme) => (ItemCardStyle(theme)));\n\nconst IOSSwitch = withStyles((theme) => ({\n  root: {\n    width: 42,\n    height: 26,\n    padding: 0,\n    margin: theme.spacing(1),\n  },\n  switchBase: {\n    padding: 1,\n    '&$checked': {\n      transform: 'translateX(16px)',\n      color: theme.palette.common.white,\n      '& + $track': {\n        backgroundColor: '#52d869',\n        opacity: 1,\n        border: 'none',\n      },\n    },\n    '&$focusVisible $thumb': {\n      color: '#52d869',\n      border: '6px solid #fff',\n    },\n  },\n  thumb: {\n    width: 24,\n    height: 24,\n  },\n  track: {\n    borderRadius: 26 / 2,\n    border: `1px solid ${theme.palette.grey[400]}`,\n    backgroundColor: theme.palette.grey[50],\n    opacity: 1,\n    transition: theme.transitions.create(['background-color', 'border']),\n  },\n  checked: {},\n  focusVisible: {},\n}))(({ classes, ...props }) => {\n  return (\n    <Switch\n      focusVisibleClassName={classes.focusVisible}\n      disableRipple\n      classes={{\n        root: classes.root,\n        switchBase: classes.switchBase,\n        thumb: classes.thumb,\n        track: classes.track,\n        checked: classes.checked,\n      }}\n      {...props}\n    />\n  );\n});\n\nexport default function CardSource({ \n  indice, \n  sourceObj, \n  handleOpenModal, \n  handleOpenSetModal, \n  handleUpdCard \n}) {\n  const classes = useStyles();\n  const [item, setItem] = React.useState(sourceObj);\n\n  useEffect(() => {\n    setItem(sourceObj)\n  }, [sourceObj] )\n\n  const handleCardOptions = (event) => {\n    handleOpenSetModal(indice);\n  }\n\n  const handleUpdConfig = (key, value) => {\n    let newItem = item;\n    if(key === 'active'){\n      newItem.set(key, !newItem.get('active'));\n    }else{\n      newItem.set(key, value);\n    }\n    handleUpdCard(indice, newItem);\n  }\n\n  return (\n    <Card className={classes.root} display=\"inline\">\n      <CardContent>\n        <CardActionArea onClick={handleCardOptions}>\n          <Typography variant=\"body2\" color=\"initial\" component=\"p\">\n            {item.get('name')} \n            <br/>\n            {item.get('id')}\n          </Typography>\n          <ListItem divider key={'div1'} />\n          <br />\n          <div className={classes.imgChange}>\n            <Icon style={{ fontSize: 100, color : item.get('thumbColor')}}>\n              {item.get('thumb')}\n            </Icon>\n          </div>\n\n        </CardActionArea>\n\n        <Button variant=\"contained\" onClick={() => handleOpenModal(indice)} color=\"secondary\">\n          <FormattedMessage id=\"app.addContent\"/>\n        </Button>\n\n        <Typography variant=\"body2\" color=\"initial\" component=\"p\">\n          <FormattedMessage id=\"app.description\"/>\n        </Typography>\n\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n          {item.get('description')}\n        </Typography>\n\n        <br />\n\n        <Grid container spacing={0}>\n          <Grid item xs={6} md={6} sm={6}>\n            <Typography variant=\"body2\" color=\"initial\" component=\"span\">\n              <b><FormattedMessage id=\"app.Status\"/></b>:\n            </Typography>\n            <Typography variant=\"body2\" color=\"error\" component=\"span\">\n              {item.get('status')}\n            </Typography>\n          </Grid>\n          <Grid item xs={6} md={6} sm={6}>\n            <Typography variant=\"body2\" color=\"initial\" component=\"span\">\n              <b><FormattedMessage id=\"app.Date\"/></b>:\n            </Typography>\n            <Typography variant=\"body2\" color=\"error\" component=\"span\">\n              {moment(item.get('vinculacao')).format('DD/MM/Y')}\n            </Typography>\n          </Grid>\n          <Grid item xs={6} md={6} sm={6}>\n            {item.get('status') !== 'new' ? <FormControlLabel\n              control={\n                <IOSSwitch \n                checked={item.get('active')}\n                onChange={(event) => handleUpdConfig('active', event.target.value)}\n                name=\"checkedB\" />\n              }\n              label={'ativar'}\n            /> :\n              <b></b>\n            }\n          </Grid>\n        </Grid>\n    </CardContent>\n    </Card>\n  )\n}","\nimport React, { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {Button} from \"@material-ui/core\";\nimport Modal from '@material-ui/core/Modal';\nimport Fade from '@material-ui/core/Fade';\nimport Backdrop from '@material-ui/core/Backdrop';\n\nconst useStyles = makeStyles((theme) => ({\n  modal: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  paper: {\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nexport default function CardSourceSetModal({\n  statusModal, \n  handleDownloadCard, \n  handleDeleteCard,\n  handleClose\n}) {\n\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n\n  useEffect(()=>{\n    setOpen(statusModal)\n  },[statusModal])\n\n  return (\n    <div>\n      <Modal\n        aria-labelledby=\"transition-modal-title\"\n        aria-describedby=\"transition-modal-description\"\n        className={classes.modal}\n        open={open}\n        onClose={handleClose}\n        closeAfterTransition\n        BackdropComponent={Backdrop}\n        BackdropProps={{\n          timeout: 500,\n        }}\n      >\n        <Fade in={open}>\n          <div className={classes.paper}>\n            <Button variant=\"contained\" onClick={handleDownloadCard} color=\"secondary\">\n              {/* <FormattedMessage id=\"app.addContent\"/> */}\n              Download\n            </Button>\n            <Button variant=\"contained\" onClick={handleDeleteCard}>\n              {/* <FormattedMessage id=\"app.addContent\"/> */}\n              Excluir Card\n            </Button>\n          </div>\n        </Fade>\n      </Modal>\n    </div>\n  );\n}","export const sendDownload = async (name, data) => {\n\n    const element = document.createElement(\"a\");\n\n    const textFile = new Blob([\n      JSON.stringify(data)\n    ], {type: 'text/plain'}); \n\n    element.href = URL.createObjectURL(textFile);\n    element.download = name;\n    document.body.appendChild(element); \n    element.click();\n}","import Axios from 'axios'\n// import {feeds} from '../../dataG1.js';\n\nexport const getFeeds = async (inputFeed) => {\n\n  // return feeds;\n  let feed = {};\n\n  let response =  await Axios.get(\"https://api.rss2json.com/v1/api.json?rss_url=\" + inputFeed);\n\n  feed[\"author\"]  = response?.data?.author || response?.data?.feed?.author;\n  feed[\"image\"]   = response?.data?.image || response?.data?.feed?.image;\n  feed[\"title\"]   = response?.data?.title || response?.data?.feed?.title;\n  feed[\"items\"]   = response?.data?.items || response?.data?.items;\n  feed[\"created\"] = new Date().getTime();\n  feed[\"url\"]     = inputFeed;\n\n  return feed;\n}","import React, { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {TextField, Grid, Typography} from \"@material-ui/core\";\nimport Button from '@material-ui/core/Button';\nimport Modal from '@material-ui/core/Modal';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport Fade from '@material-ui/core/Fade';\nimport {DropzoneArea} from 'material-ui-dropzone'\nimport {sendDownload} from '../../services/Content/File';\nimport Parser from 'rss-parser';\n\n\nimport {getFeeds} from '../../services/Content/Rss';\n\n// const RSS_URL = 'https://g1.globo.com/rss/g1/pop-arte/';\n// const RSS_URL = 'http://noticias.r7.com/economia/feed.xml';\nconst RSS_URL = '';\n\nconst useStyles = makeStyles((theme) => ({\n  modal: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  paper: {\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nexport default function CardSourceUpModal({statusModal, handleClose}) {\n  const classes = useStyles();\n\n  const [open, setOpen] = React.useState(false);\n  const [rssLink, setTextRssLink] = React.useState(RSS_URL);\n\n  const handleRssText = (e) => {\n    setTextRssLink(e.target.value);\n  }\n\n  const downloadFormat1 = async() => {\n    const format = {\"cards\":[{\"id\":\"...\",\"name\":\"...\",\"author\":\"...\",\"thumb\":\"...\",\"image\":\"...\",\"url\":\"...\",\"description\":\"....\",\"category\":\"...\",\"active\":true,\"items\":[{\"title\":\"...\",\"pubDate\":\"2021-07-01 17:55:26\",\"link\":\"\",\"author\":\"\",\"thumbnail\":\"\"}]}]};\n    await sendDownload('card-format1.json', format);\n  }\n\n  const loadRssButton = async () => {\n    let Source = await getFeeds(rssLink);\n\n    Source['thumb'] = 'leak_add';\n    Source['thumbColor'] = 'orange';\n    Source['name'] = 'Rss';\n\n    handleClose('rss', Source);\n  }\n\n  const loadFileRssContent = (file) => {\n    const reader = new FileReader()\n    reader.onload = async (e) => { \n      const contents = e.target.result;\n\n      let parser = new Parser();\n\n      parser.parseString(contents, function(opc, rssParsed){\n        const d = new Date();\n        const data = {\n          items : stripAllArray(rssParsed['items']),\n          thumb      : 'leak_add',\n          description: 'Extracted : '+\n            d.getFullYear()+'-'+d.getMonth()+'-'+d.getDay()+'-'+d.getHours(),\n          name       : rssParsed['title'],\n          thumbColor : 'red',\n          category   : 'rss',\n          url        : rssParsed['feedUrl'],\n        };\n        handleClose('rss', data)\n      })\n\n    };\n    reader.readAsText(file)\n  }\n\n  const stripAllArray = (array) => {\n\n    for(let a in array){\n\n      let type = typeof array[a];\n\n      if(type === 'object'){\n        array[a] = stripAllArray(array[a])\n      }else if(typeof array[a] ===  'string'){\n        array[a] = array[a].replace(/(<([^>]+)>)/gi, \"\").trim(); \n      }\n    }\n    return array;\n  }\n\n  const loadCardContent = (file) => {\n      const reader = new FileReader()\n      reader.onload = async (e) => { \n        const json = JSON.parse(e.target.result);\n        json['thumb'] = 'archive';\n        json['thumbColor'] = 'blue';\n        json['category'] = 'card';\n\n        handleClose('card', json)\n      };\n      reader.readAsText(file)\n  }\n\n  const handleChange = (files) => {\n\n    if(files[0]){\n      let file     = files[0];\n      file.date    = new Date();\n\n      switch (file.type) {\n        case 'text/xml':\n          loadFileRssContent(file);\n          break;\n        case 'application/json':\n          loadCardContent(file);\n          break;\n        default:\n          alert('Formato não permitido')\n      }\n    }\n  }\n\n  useEffect(()=>{\n    setOpen(statusModal)\n  },[statusModal])\n\n  return (\n    <div>\n      <Modal\n        aria-labelledby=\"transition-modal-title\"\n        aria-describedby=\"transition-modal-description\"\n        className={classes.modal}\n        open={open}\n        onClose={() => handleClose(false)}\n        closeAfterTransition\n        BackdropComponent={Backdrop}\n        BackdropProps={{\n          timeout: 500,\n        }}\n      >\n        <Fade in={open}>\n          <div className={classes.paper}>\n            <form className={classes.root} noValidate autoComplete=\"off\">\n              <Grid container spacing={1}>\n                <Grid item xs={10} md={10}>\n                  <TextField \n                    onChange={handleRssText} \n                    id=\"standard-basic\" \n                    label=\"Link Rss\" \n                    fullWidth\n                    value={rssLink}/>\n                </Grid>\n                <Grid xs={2} md={2} item>\n                  <br/>\n                  <Button  onClick={loadRssButton} variant=\"contained\">\n                    Adicionar\n                  </Button>\n                </Grid>\n              </Grid>\n            </form>\n            <Typography variant=\"h5\" component=\"h2\">\n              <center>Ou</center>\n            </Typography>\n            <Typography variant=\"h5\" component=\"h2\">\n              adicione um arquivo abaixo no formato correto abaixo \n            </Typography>\n            <DropzoneArea\n              onChange={handleChange}\n            />\n            <p></p>\n            {/* <Typography variant=\"body2\" gutterBottom>\n              <i>arquivo txt com conteúdo para importar um documento só</i>\n            </Typography> */}\n            <Typography variant=\"body2\" gutterBottom>\n              <Button onClick={downloadFormat1} variant=\"outlined\" color=\"secondary\">\n                <b>* Formato 2 </b>\n              </Button>\n              <i>\n                Para importar um card completo\n              </i>\n            </Typography>\n          </div>\n        </Fade>\n      </Modal>\n    </div>\n  );\n}","import React from \"react\";\nimport {\n    Grid,\n} from \"@material-ui/core\";\n\nimport Typography from \"@material-ui/core/Typography\";\nimport {FormattedMessage} from 'react-intl';\n\nimport CardSource from '../cards/CardSource.jsx';\nimport CardSourceSetModal from '../cards/CardSourceSetModal.jsx';\nimport CardSourceUpModal from '../cards/CardSourceUpModal.jsx';\nimport {sendDownload} from '../../services/Content/File';\n\nexport default function SourceContents({cardsInput, setCardsInput}) {\n\n  const [openModalUpSource, setOpenModalUpSource]   = React.useState(false);\n  const [openModalSetSource, setOpenModalSetSource]   = React.useState(false);\n  const [indiceAtivo, setIndiceAtivo]           = React.useState(0);\n\n  const handleDeleteCard = async () => {\n    let newCards = [...cardsInput];\n    newCards.splice(0, 1);\n    setCardsInput(newCards)\n    setOpenModalSetSource(false);\n  }\n\n  const handleDownloadCard = async () => {\n    await sendDownload('card-format1.json', cardsInput[indiceAtivo].attrs);\n  }\n\n  const handleCloseModalUpSource = (type, data) => {\n\n    if(!type){\n      setOpenModalUpSource(false);\n      return false;\n    }\n    let newCards = cardsInput;\n\n    data['category'] = type;\n    data['status'] = 'active';\n    data['active'] = true;\n\n    newCards[indiceAtivo].fill(data);\n\n    setCardsInput(newCards);\n    setOpenModalUpSource(false);\n  };\n\n  const handleUpdCard = (indice, $item) => {\n    let newCards = [...cardsInput];\n    newCards[indice] = $item;\n    setCardsInput(newCards);\n  };\n\n  const handleOpenModalUpSource = (indice) => {\n    setIndiceAtivo(indice)\n    setOpenModalUpSource(true);\n  };\n\n  const handleOpenSetModal = (indice) => {\n    setIndiceAtivo(indice)\n    setOpenModalSetSource(true);\n  };\n\n  const handleCloseModalSetSource = (data) => {\n    setOpenModalSetSource(false);\n  }\n\n  return (\n    <div>\n      <Typography variant=\"h5\" gutterBottom>\n        <FormattedMessage id=\"app.Data\"/>\n      </Typography>\n      <br/>\n      <Grid container spacing={0}>\n        {cardsInput.map((card, index) => {\n          return (\n            <Grid item key={'CardSourcegrid-'+index}>\n              <CardSource \n               indice={index} \n               handleUpdCard={handleUpdCard} \n               handleOpenModal={handleOpenModalUpSource}\n               handleOpenSetModal={handleOpenSetModal} \n               sourceObj={card}/>\n            </Grid>\n          )\n        })}\n      </Grid>\n      <CardSourceUpModal \n        handleClose={handleCloseModalUpSource} \n        statusModal={openModalUpSource}\n      />\n      <CardSourceSetModal \n        handleClose={handleCloseModalSetSource} \n        handleDownloadCard={handleDownloadCard} \n        handleDeleteCard={handleDeleteCard} \n        statusModal={openModalSetSource}\n      />\n    </div>\n  )\n}","import React from \"react\";\r\nimport Plot from 'react-plotly.js';\r\nimport randomColor from \"randomcolor/randomColor\";\r\n\r\nexport default function PlotByWeek({ plotDataWeek }) {\r\n\r\n  const plotTfIdfByWeek = () => {\r\n\r\n    let dataToPlot = [];\r\n    let months = ['Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sab', 'Dom']\r\n    let daysColors = {'Seg':'yellow', 'Ter':'black', 'Qua':'purple', 'Qui':'red', 'Sex':'green', 'Sab':'pink', 'Dom':'blue'}\r\n\r\n    months.forEach((item, index) => {\r\n      plotDataWeek[index] && plotDataWeek[index].forEach((itemDay) => {\r\n        dataToPlot.push({\r\n          x: [months[index]],\r\n          y: [itemDay['value']],\r\n          type: 'bar',\r\n          name: itemDay['term'],\r\n          marker: {color: randomColor({luminosity: 'dark', hue: daysColors[months[index]]})},\r\n        })\r\n      })\r\n    })\r\n\r\n    return <Plot\r\n        data={dataToPlot}\r\n        style={{width: \"100%\", height: \"100%\"}}\r\n        layout={ {\r\n          barmode:\"group\",\r\n          bargap :0.2,\r\n          bargroupgap: 0.1,\r\n          title: 'Melhores por dia da semana'\r\n        } }\r\n      />\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {plotTfIdfByWeek(plotDataWeek)}\r\n    </div>\r\n  )\r\n}","import React from \"react\";\r\nimport Plot from 'react-plotly.js';\r\n\r\nimport randomColor from \"randomcolor/randomColor\";\r\n\r\nexport default function plotDataHours({ plotDataHours }) {\r\n\r\n  const plotTfIdfByHours = () => {\r\n\r\n    let axis_x = Object.keys(plotDataHours);\r\n    let dataToPlot = [];\r\n\r\n    axis_x.forEach((hour) => {\r\n      if(plotDataHours[hour]){\r\n        let array = plotDataHours[hour];\r\n        array.sort((a,b)=> a['value'] - b['value']);\r\n        array.forEach(\r\n        (itemDay, indexDay) => {\r\n\r\n          dataToPlot.push({\r\n            x: [hour+\"h\"],\r\n            y: [itemDay['value']],\r\n            type: 'bar',\r\n            name: itemDay['term'],\r\n            marker: {color: randomColor({\r\n              luminosity: 'dark',\r\n              seed : indexDay,\r\n            })},\r\n          })\r\n        })\r\n      }\r\n    })\r\n\r\n    return <Plot\r\n        data={dataToPlot}\r\n        style={{width: \"100%\", height: \"100%\"}}\r\n        config={{responsive: true}}\r\n        layout={ {\r\n          xaxis : { tickangle: -45},\r\n          barmode: 'group',\r\n          bargap :0.2,\r\n          bargroupgap: 0.1,\r\n            line: {\r\n          width: 2.5,\r\n          margin: 1\r\n      },\r\n          yaxis: {\r\n            zeroline: true,\r\n          },\r\n          title: 'Melhores por Horário',\r\n        } }\r\n      />\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {plotTfIdfByHours()}\r\n    </div>\r\n  )\r\n}","import React from \"react\";\r\nimport Plot from 'react-plotly.js';\r\n\r\nexport default function TfIdfByAll({ plotDataAll }) {\r\n\r\n  const plotTfIdfByAll = () => {\r\n\r\n    let axis_x = plotDataAll.map(item => item['term']);\r\n    let axis_y = plotDataAll.map(item => item['value']);\r\n\r\n    let dataToPlot = [\r\n      {\r\n        x : axis_x, \r\n        y : axis_y,\r\n        mode: 'lines+markers',\r\n        marker: {color: 'red'},\r\n      }\r\n    ];\r\n\r\n    return <Plot\r\n        data={dataToPlot}\r\n        style={{width: \"100%\", height: \"100%\"}}\r\n        useResizeHandler={true}\r\n        layout={ {\r\n          title: 'Mais bem avaliados'\r\n        } }\r\n      />\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {plotTfIdfByAll()}\r\n    </div>\r\n  )\r\n}","import React from \"react\";\r\nimport Plot from 'react-plotly.js';\r\n\r\nconst colorsHourPie = [\r\n  'rgb(58, 46, 125)', //1 \r\n  'rgb(90, 78, 156)', //2\r\n  'rgb(39, 13, 181)', //3\r\n  'rgb(13, 114, 181)', //4\r\n  'rgb(0, 133, 173)', //5\r\n  'rgb(11, 141, 212)', //6\r\n  'rgb(145, 212, 11)', //7\r\n  'rgb(205, 212, 11)', //8\r\n  'rgb(237, 213, 59)', //9\r\n  'rgb(255, 246, 84)', //10\r\n  'rgb(255, 237, 145)',//11\r\n  'rgb(209, 188, 77)', //12\r\n  'rgb(245, 208, 15)', //13\r\n  'rgb(252, 206, 106)', //14\r\n  'rgb(252, 204, 144)', //15\r\n  'rgb(255, 151, 23)', //16\r\n  'rgb(201, 111, 0)', //17\r\n  'rgb(201, 74, 0)', //18\r\n  'rgb(115, 27, 0)', //19\r\n  'rgb(110, 0, 35)', //20\r\n  'rgb(110, 0, 82)', //21\r\n  'rgb(110, 1, 88)', //22\r\n  'rgb(121, 2, 212)', //23\r\n  'rgb(63, 1, 110)', //00\r\n];\r\n\r\nexport default function PostTime({ plotDataPosttTime }) {\r\n\r\n  function ksort(obj) {\r\n    if (!obj || typeof (obj) != 'object') {\r\n      return [];\r\n    }\r\n    var keys = [], values = [];\r\n\r\n    for (let a in obj) {\r\n      keys.push(a);\r\n    }\r\n\r\n    keys = keys.reverse();\r\n\r\n    for (let i = 0; i < keys.length; i++) {\r\n      values.push(obj[keys[i]]);\r\n    }\r\n\r\n    return [keys, values];\r\n  }\r\n\r\n  const plotPostTime = () => {\r\n\r\n    let [labels, values] = ksort(plotDataPosttTime);\r\n\r\n    for(let a in labels){\r\n      labels[a] = labels[a]+'h';\r\n    }\r\n\r\n    let dataToPlot = [\r\n      {\r\n        values : values, \r\n        labels : labels,\r\n        type: 'pie',\r\n        hole: .2,\r\n        mode: 'label+percent+name',\r\n        textinfo: \"label+value+percent\",\r\n        textposition: \"inside\",\r\n        automargin: false,\r\n        marker: {colors: colorsHourPie},\r\n      }\r\n    ];\r\n\r\n    return <Plot\r\n        data={dataToPlot}\r\n        style={{width: \"100%\", height: \"100%\"}}\r\n        useResizeHandler={false}\r\n        layout={ {\r\n          title: 'Horários com mais publicações',\r\n          showlegend: true,\r\n        } }\r\n      />\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {plotPostTime()}\r\n    </div>\r\n  )\r\n}","import React from \"react\";\r\nimport Plot from 'react-plotly.js';\r\nimport randomColor from \"randomcolor/randomColor\";\r\n\r\nexport default function PlotComparison({ similarityList }) {\r\n\r\n  const showComparison = () => {\r\n\r\n    if(!similarityList){\r\n      return '';\r\n    }\r\n\r\n    let axis_x = [];\r\n    let axis_y = [];\r\n\r\n    for(let idCard in similarityList){\r\n      axis_x.push(idCard);\r\n      axis_y.push(similarityList[idCard]['mean']);\r\n    }\r\n\r\n    let dataToPlot = [\r\n      {\r\n        x : axis_x, \r\n        y : axis_y,\r\n        type: 'bar',\r\n        mode: 'lines+markers',\r\n        marker: {color: randomColor()},\r\n      }\r\n    ];\r\n\r\n    return <Plot\r\n        data={dataToPlot}\r\n        style={{width: \"100%\", height: \"100%\"}}\r\n        useResizeHandler={true}\r\n        layout={ {title: 'Fontes com conteúdo mais similaridades'} }\r\n      />\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {showComparison()}\r\n    </div>\r\n  )\r\n}","import React from \"react\";\r\nimport { Tree, TreeNode } from 'react-organizational-chart';\r\n\r\nexport default function PlotTree({ dataToPlot }) {\r\n\r\n  const makeTree = () => {\r\n    return printNode(dataToPlot?.modelTree?.model)\r\n  }\r\n\r\n  const printNode = (node, indexParent = 0) => {\r\n    return node?.vals ? \r\n      node.vals.map((item, index)=>{\r\n      return <TreeNode key={'nodeTree'+indexParent+'-'+index} \r\n                label={<div>{item?.name}</div>}>\r\n          {printNode(item?.child, indexParent+'-'+index)}\r\n      </TreeNode>})\r\n      :\r\n      (<TreeNode label={<div>{node?.val}</div>}>\r\n      </TreeNode>)\r\n  }\r\n\r\n  return (\r\n    <Tree label={<div>Root</div>}>\r\n      {makeTree()}\r\n    </Tree>\r\n  )\r\n}","export function calcTfIdfCards (cards, configToken = {}, configFilter = {}) {\n\n  let results = [];\n\n  for(let a in cards){\n    if(cards[a].get('status') !== 'new' && cards[a].get('active')){\n      let tf = extractTfAllDocuments(cards[a], configToken, configFilter.targetField);\n      let dataCard = {\n        'idCard' : cards[a].get('id'),\n        'category' : cards[a].get('category'),\n        'tf'  : tf,\n        'idf' : defineIdf(tf)\n      }\n      results.push(dataCard);\n    }\n  }\n\n  calcTfIDFFromTfCard(results)\n  return results;\n}\n\nfunction calcTfIDFFromTfCard(dataTreated)\n{\n  dataTreated.forEach((card, cardIndex) => {\n\n    dataTreated[cardIndex]['tf-idf'] = [];\n\n    for(let a in card['tf']){\n\n      let newResults = []\n\n      let dataSet = card['tf'][a]['results'];\n\n      for(let d in dataSet){\n        if(dataTreated[cardIndex]['idf'][d]){\n          let tfidf = dataSet[d] * dataTreated[cardIndex]['idf'][d];\n\n            newResults.push({\n              term : d,\n              value : tfidf\n            })\n        }\n      }\n\n      dataTreated[cardIndex]['tf-idf'].push({\n        results   : newResults,\n        posItem   : card['tf'][a].posItem,\n        pubDate   : card['tf'][a].pubDate,\n        categories: card['tf'][a].categories,\n        author    : card['tf'][a].author\n      });\n    }\n  })\n}\n\nfunction extractTfAllDocuments(card, configToken, propertyChoosed)\n{\n  let items = card.get('items');\n  let results = [];\n\n  for(let i in items){\n  // \n    let termsCaseTreated = makeTokens(configToken, items[i][propertyChoosed]);\n\n    results.push({\n      'results' : calcTf(\n        addTermsToDictionary(termsCaseTreated, {}, 2)\n      ),\n      'posItem' : i,\n      'author' :  items[i]['author'],\n      'categories' :  chooseCategories(items[i]['categories']),\n      'pubDate' : items[i]['pubDate'] || ''\n    })\n  }\n  return results;\n}\n\nfunction chooseCategories($field){\n  if(typeof $field === 'object'){\n    return $field.join('-');\n  }else{\n    return $field || '';\n  }\n}\n\nfunction addTermsToDictionary(terms, dictionary){\n  for(let a in terms){\n\n    if(terms[a] === ''){ continue; }\n\n    if(dictionary[terms[a]]){\n      dictionary[terms[a]] = dictionary[terms[a]] + 1; \n    }else{\n      dictionary[terms[a]] = 1; \n    }\n  }\n  return dictionary;\n}\n\nfunction calcTf(words){\n  let tf = {};\n  let wordsLength = Object.keys(words).length;\n\n  for(let a in words){\n    tf[a] = words[a] / wordsLength;\n  }\n  return tf;\n}\n\nfunction defineIdf(tfResults){\n\n  let wordsPerText = {};\n  let idf = {};\n\n  let qtdTexts = Object.keys(tfResults).length;\n\n  for(let a in tfResults){\n    addTermsToDictionary(Object.keys(tfResults[a]['results']), wordsPerText)\n  }\n\n  for(let a in wordsPerText){\n    idf[a] = Math.log(qtdTexts / wordsPerText[a]);\n  }\n\n  return idf;\n}\n\nfunction makeTokens(args, text = '')\n{\n  let fieldData = text.replace(/&lt;/g, '<', 'g');\n  fieldData = fieldData.replace(/&gt;/g, \">\");\n  fieldData = fieldData.replace(/<[^>]*>/gi, \"\").trim();\n  let fieldDatawithoutInvisible = fieldData.replace(/[\\u0000-\\u001F\\u007F-\\u009F]/g, '');\n\n  let divider   = args['divider'];\n  let textCase  = args['case'] ? args['case'] : null;\n  let minLength = args['minLength'] ? args['minLength'] : 1;\n  let ngrams    = args['ngrams'] ? args['ngrams'] : 1;\n  \n  let choosedFieldFiltered = fieldDatawithoutInvisible.trim();\n  var expression           = new RegExp(divider, 'gi');\n  let termsSplited         = choosedFieldFiltered.split(expression);\n  \n  let termsMinLength = [];\n\n  for(let i in termsSplited){\n    if(termsSplited[i].length >= minLength){\n      termsMinLength.push(termsSplited[i])\n    }\n  }\n      \n  let termsCaseTreated = termsMinLength.map(\n    (item) => \n      textCase === 'lower' ?\n        item.toLowerCase() : textCase === 'upper' ?\n          item.toUpperCase() : item\n  );\n\n  let stopWords = args['stopWords'].split(',');\n\n  let dataWithNgrams = applyNgrams(\n    applyStopWords(stopWords, termsCaseTreated),\n    ngrams\n  );\n\n\n  let finalData = !args['stopWords'] ? \n    dataWithNgrams : \n    applyStopWords(stopWords, dataWithNgrams);\n\n  return finalData;\n}\n\nfunction applyStopWords(stopWords, arrayOfSplitedData){\n  return arrayOfSplitedData.filter((term) => { \n    for(let a in stopWords){\n      if(stopWords[a] === term){\n        return false;\n      }\n    }\n    return true;\n  });\n}\n\nfunction applyNgrams(arrayOfSplitedData, ngrams){\n  let newArray = [];\n  for(let a = 0; a + ngrams < arrayOfSplitedData.length; ++a){\n    let newString = '';\n    for(let i = 0; i  < ngrams; ++i){\n      newString += (i === 0 ? '' : ' ') + arrayOfSplitedData[a + i];\n    }\n    newArray.push(newString);\n  }\n  return newArray;\n}","import React, { useEffect, useState } from \"react\";\r\n\r\nimport {\r\n  Button,\r\n  Grid\r\n} from \"@material-ui/core\";\r\n\r\nimport moment from 'moment'\r\nimport PlotByWeek from '../charts/ByWeek';\r\nimport PlotDataHours from '../charts/DataHours';\r\nimport PlotTfIdfByAll from '../charts/TfIdfByAll';\r\nimport PlotPostTime from '../charts/PostTime';\r\nimport PlotComparison from '../charts/Comparison';\r\nimport PlotTree from '../charts/Tree';\r\n\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { calcTfIdfCards } from '../../services/Ai/TfIdf.js';\r\n\r\n\r\nexport default function CalcPanel({ \r\n  modelTree,\r\n  setModelTree,\r\n  cardsInput, \r\n  configToken, \r\n  configFilter \r\n}) {\r\n\r\n  const [tfIdf, setTfIdf] = useState([]);\r\n\r\n  const [plotDataWeek, setPlotDataWeek] = useState({});\r\n  const [plotDataHours, setPlotDataHours] = useState([]);\r\n  const [plotDataAll, setPlotDataAll] = useState([]);\r\n  const [plotDataPosttTime, setPlotDataPostTime] = useState([]);\r\n\r\n  const [countWordsGenerated, setWordsGenerated] = useState(0);\r\n  const [countWordsUsedtree, setWordsUsedtree] = useState(0);\r\n  const [countWordsUsed, setWordsUsed] = useState(0);\r\n  const [countDocuments, setCountDocuments] = useState(0);\r\n  const [countFonts, setCountFonts] = useState(0);\r\n\r\n  const [limitCount] = useState(10);\r\n  const [similarityList, setSimilarityList] = useState('');\r\n\r\n  useEffect(() => {\r\n    calcAll();\r\n  }, [tfIdf])\r\n\r\n  let selectedWeek = {\r\n    0: [],\r\n    1: [],\r\n    2: [],\r\n    3: [],\r\n    4: [],\r\n    5: [],\r\n    6: [],\r\n  };\r\n\r\n  const execCalcs = () => {\r\n    let data = calcTfIdfCards(cardsInput, configToken, configFilter)\r\n    setTfIdf(data);\r\n  }\r\n\r\n  const calcAll = () => {\r\n    let counts = {\r\n      countWordsGenerated: 0,\r\n      countWordsUsed: 0,\r\n      countDocuments: 0,\r\n      countFonts: 0,\r\n    };\r\n\r\n    let minValueTfIdf;\r\n    let maxValueTfIdf;\r\n    let cutTfIdf = 0;\r\n    let cutTreeData = 0;\r\n    let selectedAll = [];\r\n    let selectedHours = [];\r\n    let selectedPostsTime = {};\r\n\r\n    counts['dataTree'] = [];\r\n\r\n    tfIdf.forEach((card, cardIndex) => {\r\n      ++counts['countFonts'];\r\n\r\n      card['tf-idf'].forEach((cardTfIdf) => {\r\n        let results = cardTfIdf['results'];\r\n\r\n        ++counts['countDocuments'];\r\n        counts['countWordsGenerated'] = counts['countWordsGenerated'] + results.length;\r\n\r\n        results.sort(function (a, b) { return b['value'] - a['value'] })\r\n\r\n        minValueTfIdf = minValueTfIdf < results[results.length - 1]['value'] ?\r\n          minValueTfIdf : results[results.length - 1]['value'];\r\n\r\n        maxValueTfIdf = maxValueTfIdf > results[0]['value'] ?\r\n          maxValueTfIdf : results[0]['value'];\r\n\r\n        let slicedResults = results.slice(0, limitCount);\r\n        let day = new Date(cardTfIdf.pubDate).getDay();\r\n        let hour = new Date(cardTfIdf.pubDate).getHours();\r\n\r\n        slicedResults.forEach((item) => {\r\n          item['idCard'] = card['idCard'];\r\n          item['dataPub'] = cardTfIdf['pubDate'];\r\n          item['categories'] = cardTfIdf['categories'];\r\n          item['author'] = cardTfIdf['author'];\r\n          item['day'] = day;\r\n          item['hour'] = hour;\r\n        })\r\n\r\n        selectedAll = selectedAll.concat(slicedResults);\r\n\r\n        selectedWeek[day] = selectedWeek[day] = slicedResults;\r\n        selectedHours[hour] = selectedHours[hour] ?\r\n          selectedHours[hour].concat(slicedResults) : slicedResults\r\n\r\n        if (!selectedPostsTime[hour]) {\r\n          selectedPostsTime[hour] = 0;\r\n        }\r\n        ++selectedPostsTime[hour];\r\n      })\r\n    })\r\n\r\n    let percentCutTFIDF = configFilter?.idfCut || 50;\r\n    let percentCutTree = configFilter?.treeCut || 50;\r\n\r\n    cutTfIdf = Math.round((selectedAll.length * percentCutTFIDF) / 100);\r\n\r\n    selectedAll = selectedAll.sort(function (a, b) { return a['value'] - b['value'] })\r\n    selectedAll.splice(0, cutTfIdf);\r\n\r\n    cutTreeData = Math.round((selectedAll.length * percentCutTree) / 100);\r\n\r\n    let dataToTreeFirstSelected = [];\r\n\r\n    for(let z in selectedAll){\r\n      let item = selectedAll[z]\r\n      if(z > cutTreeData){\r\n        dataToTreeFirstSelected.push(item);\r\n      }\r\n    }\r\n    counts['countWordsUsedTree'] = dataToTreeFirstSelected.length\r\n    let dataToTree = [];\r\n    \r\n    for(let z in selectedAll){\r\n      let item = selectedAll[z]\r\n      for(let x in dataToTreeFirstSelected){\r\n        if(dataToTreeFirstSelected[x]['term'] === item['term']){\r\n          item['hour'] = item['hour']+':00h'\r\n          item['day'] = getDayName(item['day'])\r\n          dataToTree.push(item);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    counts['countWordsUsed'] = selectedAll.length\r\n    const selectedAllWihtoutDuplicates = selectedAll.filter(function (item, pos, arrayContent) {\r\n      for (let a in arrayContent) {\r\n        if (pos !== a &&\r\n          item.term === arrayContent[a].term &&\r\n          item.value < arrayContent[a].value) {\r\n          return false\r\n        }\r\n      }\r\n      return true;\r\n    })\r\n\r\n    calcDataTree(dataToTree)\r\n\r\n    setWordsUsedtree(counts['countWordsUsedTree']);\r\n    setWordsGenerated(counts['countWordsGenerated']);\r\n    setWordsUsed(counts['countWordsUsed']);\r\n    setCountDocuments(counts['countDocuments']);\r\n    setCountFonts(counts['countFonts']);\r\n\r\n    setPlotDataPostTime(selectedPostsTime);\r\n    setPlotDataWeek(selectedWeek);\r\n    setPlotDataHours(selectedHours);\r\n    setPlotDataAll(selectedAllWihtoutDuplicates);\r\n\r\n    if (configFilter['targetCardForComparison']) {\r\n      let similarity = compareSources();\r\n      setSimilarityList(similarity);\r\n    }\r\n  }\r\n\r\n\r\n  const getDayName = (num) => {\r\n    switch (num) {\r\n      case 0:\r\n        return 'segunda';\r\n      case 1:\r\n        return 'Terça';\r\n      case 2:\r\n        return 'Quarta';\r\n      case 3:\r\n        return 'Quinta';\r\n      case 4:\r\n        return 'Sexta';\r\n      case 5:\r\n        return 'Sábado';\r\n      case 6:\r\n        return 'Domingo';\r\n      default :\r\n        console.log('('+num+ ') Não é um número de dia da semana aceitável')\r\n        break;\r\n    }\r\n  }\r\n\r\n  const getVectorFormat = () => {\r\n    let vectorFormat = [];\r\n    tfIdf.forEach((card, cardIndex) => {\r\n\r\n      card['tf-idf'].forEach((cardTfIdf) => {\r\n\r\n        let results = cardTfIdf['results'];\r\n\r\n        results.forEach((result) => {\r\n\r\n          let unique = true;\r\n          vectorFormat.forEach((item) => {\r\n\r\n            if (item['term'] === result['term'].toLowerCase()) {\r\n              unique = false;\r\n            }\r\n          })\r\n\r\n          if (unique) {\r\n            vectorFormat.push({ 'term': result['term'].toLowerCase(), value: 0 });\r\n          }\r\n        })\r\n      })\r\n    })\r\n\r\n    return vectorFormat;\r\n  }\r\n\r\n  function shuffle(array) {\r\n    let currentIndex = array.length, randomIndex;\r\n\r\n    // While there remain elements to shuffle...\r\n    while (currentIndex !== 0) {\r\n\r\n      // Pick a remaining element...\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex--;\r\n\r\n      // And swap it with the current element.\r\n      [array[currentIndex], array[randomIndex]] = [\r\n        array[randomIndex], array[currentIndex]];\r\n    }\r\n\r\n    return array;\r\n  }\r\n\r\n  const calcDataTree = (data) => {\r\n        \r\n    if(data.length <= 0){\r\n      return false;\r\n    }else if(data.length < 2){\r\n      alert('Não existem elementos o sufuciente para montar a árvore de decisão')\r\n      return false;\r\n    }\r\n\r\n    var DecisionTree = require('decision-tree');\r\n\r\n    data = shuffle(data)\r\n    const totalCountData = data.length;\r\n    let countTrainable = (totalCountData * configFilter.percentTrain / 100)\r\n\r\n    var class_name    = \"term\";\r\n    let training_data = [];\r\n    let test_data     = [];\r\n\r\n    var features = ['hour', \"day\"];\r\n    var dt;\r\n\r\n    if(Object.keys(modelTree).length === 0 ){\r\n      training_data = data.slice(0, countTrainable);\r\n      test_data = data.slice(countTrainable);\r\n      dt = new DecisionTree(training_data, class_name, features);\r\n    }else{\r\n      dt = new DecisionTree(modelTree.modelTree);\r\n      test_data = data;\r\n    }\r\n\r\n    var accuracy = dt.evaluate(test_data);\r\n    let modelInJson = dt.toJSON();\r\n\r\n    if(\r\n        Object.keys(modelTree).length === 0 || \r\n        configFilter.percentTrain !== modelTree.modelTree.percentTrain\r\n      ){\r\n      modelInJson.date = moment(new Date()).format('Y-MM-DD HH:mm:ss');\r\n      modelInJson.percentTrain = configFilter.percentTrain;\r\n    }else{\r\n      modelInJson.date = modelTree.modelTree.date;\r\n      modelInJson.percentTrain = modelTree.modelTree.percentTrain;\r\n    }\r\n\r\n    setModelTree({\r\n      accuracy: accuracy,\r\n      modelTree: modelInJson\r\n    });\r\n  }\r\n\r\n  const formatDocumentsWithVectors = (vectorFormat) => {\r\n\r\n    let cardChoosed = null;\r\n    let cardsToCompare = [];\r\n    let formatToDecript = JSON.stringify(vectorFormat);\r\n\r\n    tfIdf.forEach((card, cardIndex) => {\r\n\r\n      let cardsToCompareVector = {\r\n        idCard: card['idCard'],\r\n        docsWithVector: [],\r\n      }\r\n\r\n      card['tf-idf'].forEach((cardTfIdf) => {\r\n\r\n        let document = {\r\n          'vector': [],\r\n          'pubDate': cardTfIdf['pubDate'],\r\n          'postItem': cardTfIdf['posItem']\r\n        }\r\n        let newVector = JSON.parse(formatToDecript);\r\n\r\n        cardTfIdf['results'].forEach((result) => {\r\n          newVector.forEach((item, index) => {\r\n            if (item['term'] === result['term'].toLowerCase()) {\r\n              newVector[index]['value'] = result['value'];\r\n            }\r\n          })\r\n        })\r\n        document['vector'] = newVector;\r\n        cardsToCompareVector['docsWithVector'].push(document);\r\n      })\r\n\r\n      if (card['idCard'] === configFilter['targetCardForComparison']) {\r\n        cardChoosed = { ...cardsToCompareVector };\r\n      } else {\r\n        cardsToCompare.push(cardsToCompareVector);\r\n      }\r\n    })\r\n    return [cardChoosed, cardsToCompare]\r\n  }\r\n\r\n  const calcMagnitudeVector = (vector) => {\r\n    return Math.sqrt(vector.reduce((acumulator, value) => {\r\n      return value ** 2 + acumulator;\r\n    }))\r\n  }\r\n\r\n  const calcCosSimilarity = (vector1, magnitude1, vector2) => {\r\n    let product = 0;\r\n\r\n    vector1.forEach((vector1Item, indexVector1) => {\r\n      product += vector1Item * vector2[indexVector1];\r\n    })\r\n\r\n    let magnitude2 = calcMagnitudeVector(vector2);\r\n\r\n    return product / (magnitude1 * magnitude2)\r\n  }\r\n\r\n  const compareSources = (choosedSource) => {\r\n\r\n    let [cardChoosed, cardsToCompare] = formatDocumentsWithVectors(getVectorFormat())\r\n\r\n    let choosed = cardChoosed['docsWithVector'].map(item => {\r\n      let vector = item['vector'].map((item) => {\r\n        return item['value'];\r\n      });\r\n      return {\r\n        vector: vector,\r\n        magnitude: calcMagnitudeVector(vector)\r\n      };\r\n    });\r\n\r\n    let similarity = {};\r\n\r\n    cardsToCompare.forEach((item) => {\r\n      let vectorToCompare = item['docsWithVector'].map(item => {\r\n        let vector = item['vector'].map((item) => {\r\n          return item['value'];\r\n        });\r\n        return {\r\n          vector: vector,\r\n          magnitude: calcMagnitudeVector(vector)\r\n        };\r\n      });\r\n\r\n      let listResults = [];\r\n\r\n      choosed.forEach((itemChoosed) => {\r\n        let listFirstResult = vectorToCompare.map(item => {\r\n          return calcCosSimilarity(\r\n            itemChoosed['vector'],\r\n            itemChoosed['magnitude'],\r\n            item['vector']\r\n          );\r\n        });\r\n        listFirstResult.sort((a, b) => b - a);\r\n        listResults.push(listFirstResult[0])\r\n      })\r\n\r\n      similarity[item['idCard']] = {\r\n        listResults: listResults,\r\n        mean: listResults.reduce((acumulator, value) => {\r\n          return value + acumulator;\r\n        }) / listResults.length\r\n      }\r\n    });\r\n\r\n    return similarity;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n        <br></br>\r\n      <Typography variant=\"h5\" gutterBottom>\r\n        <FormattedMessage id=\"app.Calcs\" />\r\n        <br></br>\r\n        <Button variant=\"contained\" onClick={execCalcs} color=\"primary\" style={{ margin: '0 5px' }}>\r\n          Executar Cálculos\r\n        </Button>\r\n      </Typography>\r\n      <div id=\"linear\">\r\n        <div className=\"chart\"></div>\r\n        <div className=\"status\"></div>\r\n        <div id=\"modelInspectionOutput\">\r\n          <p id=\"inspectionHeadline\"></p>\r\n          <table id=\"myTable\"></table>\r\n        </div>\r\n      </div>\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12}>\r\n          Quantas palavras geradas : {countWordsGenerated}\r\n          <br />\r\n          Quantas palavras apresentadas : {countWordsUsed}\r\n          <br />\r\n          Quantos documentos analisados : {countDocuments}\r\n          <br />\r\n          Quantas fontes analisadas : {countFonts}\r\n          <br />\r\n          Quantos termos únicos usados na árvore : {countWordsUsedtree}\r\n        </Grid>\r\n        <Grid item xs={12} style={{overflow:'auto'}}>\r\n          <PlotTree dataToPlot={modelTree} />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <PlotComparison similarityList={similarityList} />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <PlotPostTime plotDataPosttTime={plotDataPosttTime} />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <PlotTfIdfByAll plotDataAll={plotDataAll} />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <PlotByWeek plotDataWeek={plotDataWeek} />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <PlotDataHours plotDataHours={plotDataHours} />\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  )\r\n}","import {Component} from 'react';\n\nexport default class EntityAbstract extends Component {\n\n  get(key){\n    return this.attrs[key];\n  }\n\n  set(key, value){\n    this.attrs[key] = value;\n  }\n\n  fill(data){\n    for(let i in this.attrs){\n      if(data[i]){\n        this.attrs[i] = data[i]\n      }\n    }\n  }\n\n  toArray(){\n    return this.attrs;\n  }\n}","import EntityAbstract from './EntityAbstract.jsx';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport default class SourceEntity extends EntityAbstract\n{\n  constructor(data = []){\n    super();\n    this.attrs = {\n      id         : uuidv4(),\n      name       : 'Novo Conteúdo',\n      author     : '',\n      thumb      : 'add',\n      thumbColor : 'gray',\n      image      : '',\n      url        : '',\n      description: '',\n      category   : '',\n      active     : true,\n      items      : [],\n      created    : '',\n      status     : 'new' // new, loaded, error\n    }\n    if(data){\n      this.fill(data);\n    }\n  }\n}","import React, { useEffect } from \"react\";\r\n\r\nimport {\r\n  Grid, \r\nTextField,\r\n  Button,\r\n} from \"@material-ui/core\";\r\n\r\nimport moment from 'moment'\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { FormattedMessage } from 'react-intl';\r\nimport {DropzoneArea} from 'material-ui-dropzone'\r\n\r\nimport {sendDownload} from '../../services/Content/File';\r\n\r\nimport SourceEntity from '../../entities/SourceEntity.js'\r\n\r\nexport default function ConfigPanel({\r\n  configInput, \r\n  configToken,\r\n  cardsInput, \r\n  modelTree,\r\n  setModelTree,\r\n  setConfigFilterCallback,\r\n  setCardsSourceCallback,\r\n  setConfigTokenCallback\r\n}) {\r\n\r\n  const [config, setConfig] = React.useState(configInput);\r\n  const [fileInfo, setFileData] = React.useState(null);\r\n  const [qtdColsInfo] = React.useState(3);\r\n\r\n    useEffect(() => {\r\n      setConfig({...configInput})\r\n    }, [configInput])\r\n\r\n  const fillFileInfo = (file) => {\r\n    if(file){\r\n      setFileData([\r\n        {\"key\" : 'name'    , \"value\" : file.name},\r\n        {\"key\" : 'size'    , \"value\" : file.size},\r\n        {\"key\" : 'type'    , \"value\" : file.type},\r\n        {\"key\" : 'included', \"value\" : moment(file.date).format('HH:mm DD/MM/Y')},\r\n      ]);\r\n    }\r\n  }\r\n\r\n  const handleUpdConfig = (key, value) => {\r\n    let newConfig = {...config};\r\n    newConfig[key] = value;\r\n    setConfigFilterCallback(newConfig)\r\n  }\r\n\r\n  const handleChange = (files) => {\r\n\r\n    if(!files[0]){ return false; }\r\n\r\n    let file     = files[0];\r\n    file.date    = new Date();\r\n    const reader = new FileReader()\r\n\r\n    reader.onload = async (e) => { \r\n      const text = (e.target.result);\r\n\r\n      loadFileConfig(JSON.parse(text))\r\n      fillFileInfo(file);\r\n    };\r\n    reader.readAsText(file)\r\n  }\r\n\r\n  const loadFileConfig = async (data) => \r\n  {\r\n    if(data?.config){\r\n      setConfigFilterCallback(data['config']);\r\n    }\r\n    if(data?.cards){\r\n      for(let i in data['cards']){\r\n        data['cards'][i] = new SourceEntity(data['cards'][i])\r\n      }\r\n      setCardsSourceCallback([...data['cards']]);\r\n    }\r\n    if(data?.configToken){\r\n      setConfigTokenCallback(data['configToken']);\r\n    }\r\n    if(data?.modelTree){\r\n      setModelTree(data.modelTree);\r\n    }\r\n  }\r\n\r\n  const sendBackUpToDownload = async () => {\r\n    await sendDownload('data-guide-press.json', generateBackUpData());\r\n  }\r\n\r\n  const generateBackUpData = () => {\r\n\r\n    let cardsData = [];\r\n\r\n    for(let i in cardsInput){\r\n      if(cardsInput[i].get('status') !== 'new'){\r\n        cardsData.push( cardsInput[i].attrs );\r\n      }\r\n    }\r\n\r\n    let data = {\r\n      \"config\"     : configInput,\r\n      \"configToken\": configToken,\r\n      \"cards\"      : cardsData,\r\n      \"modelTree\" : modelTree\r\n    };\r\n    return data;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Typography variant=\"h5\" gutterBottom>\r\n        <FormattedMessage id=\"app.loadOrDownloadData\" />\r\n      </Typography>\r\n\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={2} md={2} sm={2}>\r\n          <Button variant=\"contained\" onClick={sendBackUpToDownload} color=\"primary\">\r\n            Download Base Completa\r\n          </Button>\r\n          <TextField \r\n            onChange={(event) => handleUpdConfig('rssHostDownload1', event.target.value)}\r\n            id=\"standard-basic\" \r\n            label=\"Link Rss\" \r\n            fullWidth\r\n            value={config.rssHostDownload1}\r\n            />\r\n          <TextField \r\n            onChange={(event) => handleUpdConfig('rssHostParam1', event.target.value)}\r\n            id=\"standard-basic\" \r\n            label=\"Param Rss\" \r\n            fullWidth\r\n            value={config.rssHostParam1}\r\n            />\r\n\r\n        </Grid>\r\n\r\n        <Grid item xs={4} md={4} sm={4} >\r\n          <DropzoneArea\r\n            filesLimit={1}\r\n            dropzoneText={\"Aqui coloca o arquivo\"}\r\n            showPreviews={false}\r\n            acceptedFiles={['application/json']}\r\n            showPreviewsInDropzone={false}\r\n            onChange={handleChange}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={5} md={5} sm={5}>\r\n          <Grid container spacing={2} align = \"center\" justifyContent = \"center\" alignItems = \"center\">\r\n            {!fileInfo  ? \r\n              'Conteúdo não carregado'\r\n              :\r\n              fileInfo.map((item, index) => { \r\n              return (\r\n                <React.Fragment key={'info-'+index}>\r\n                  <Grid item xs={qtdColsInfo} md={qtdColsInfo} sm={qtdColsInfo}>\r\n                    <b>{ item.key }</b>\r\n                  </Grid>\r\n                  <Grid item xs={qtdColsInfo} md={qtdColsInfo} sm={qtdColsInfo}>\r\n                    {item.value}\r\n                  </Grid>\r\n                </React.Fragment>\r\n              )\r\n            })}\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  )\r\n}","import React, { useEffect } from \"react\";\r\n\r\nimport {\r\n  Grid, \r\n  TextField,\r\n  Select,\r\n} from \"@material-ui/core\";\r\n\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { FormattedMessage, useIntl } from 'react-intl';\r\nimport FormControl from '@material-ui/core/FormControl';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  labelUp: {\r\n    ...theme.typography.button,\r\n    backgroundColor: theme.palette.background.paper,\r\n    padding: theme.spacing(1),\r\n  },\r\n    formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n    width: '100%',\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nexport default function TokenizacaoPanel({configToken, callbackLoadData}) {\r\n\r\n  const classes = useStyles();\r\n  const intl = useIntl();\r\n\r\n  const [configs, setConfigs] = React.useState(configToken);\r\n\r\n  useEffect(()=>{\r\n    setConfigs({...configToken})\r\n  },[configToken])\r\n\r\n  const handleUpdConfig = (key, value) => {\r\n    let newConfigs = configs;\r\n    newConfigs[key] = value;\r\n    callbackLoadData(newConfigs)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className={classes.labelUp}>\r\n        <Typography variant=\"h5\" gutterBottom>\r\n          <FormattedMessage id=\"app.tokenizerTitle\" />\r\n        </Typography>\r\n      </div>\r\n      <Grid container spacing={1}>\r\n        <Grid item xs={2}>\r\n          <FormattedMessage id=\"app.tokenizerRegexLabel\" />\r\n        </Grid>\r\n        <Grid item xs={4}>\r\n          <TextField \r\n            className={classes.formControl}\r\n            inputProps={{ \r\n              form: {autocomplete: 'off'}, \r\n            }}\r\n            value={configs.divider || ''}\r\n            onChange={(event) => handleUpdConfig('divider', event.target.value)}\r\n            id=\"outlined-basic\" \r\n            label=\"\" \r\n            variant=\"outlined\" />\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n          <FormattedMessage id=\"app.tokenizerNGramsLabel\" />\r\n        </Grid>\r\n        <Grid item xs={4}>\r\n          <TextField  \r\n            className={classes.formControl}\r\n            inputProps={{ \r\n              form: {autocomplete: 'off'}, \r\n            }}\r\n            value={configs.ngrams}\r\n            onChange={(event) => handleUpdConfig('ngrams', event.target.value)}\r\n            id=\"outlined-basic\" \r\n            label=\"\" \r\n            variant=\"outlined\" />\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n          <FormattedMessage id=\"app.tokenizerCaseLabel\" />\r\n        </Grid>\r\n        <Grid item xs={4}>\r\n         <FormControl variant=\"outlined\" className={classes.formControl}>\r\n          <Select\r\n            native\r\n            value={configs.case}\r\n            onChange={(event) => handleUpdConfig('case', event.target.value)}\r\n            label=\"Case\"\r\n          >\r\n            <option aria-label=\"None\" value=\"\" />\r\n            <option value='upper'>\r\n              {intl.formatMessage({id:\"app.tokenizerCaseUpperLabel\"})}\r\n            </option>\r\n            <option value='lower'>\r\n              {intl.formatMessage({id:\"app.tokenizerCaseLowerLabel\"})}\r\n            </option>\r\n          </Select>\r\n        </FormControl>\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n          <FormattedMessage id=\"app.tokenizerMinLengthLabel\" />\r\n        </Grid>\r\n        <Grid item xs={4}>\r\n          <TextField  \r\n            className={classes.formControl}\r\n            inputProps={{ \r\n              form: {autocomplete: 'off'}, \r\n            }}\r\n            value={configs.minLength}\r\n            onChange={(event) => handleUpdConfig('minLength', event.target.value)}\r\n            id=\"outlined-basic\" \r\n            label=\"\" \r\n            variant=\"outlined\" />\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n          <FormattedMessage id=\"app.tokenizerStopWordsLabel\" />\r\n        </Grid>\r\n        <Grid item xs={4}>\r\n          <TextField \r\n            onChange={(event) => handleUpdConfig('stopWords', event.target.value)}\r\n            label=\"\" \r\n            type=\"text\"\r\n            fullWidth\r\n            value={configs.stopWords}\r\n            variant=\"outlined\"\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  )\r\n}","\r\nimport React from \"react\";\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n  Grid,\r\n  Button,\r\n  Input,\r\n  InputAdornment,\r\n  TextField,\r\n  Checkbox,\r\n  FilledInput,\r\n  Slider,\r\n  Select\r\n} from \"@material-ui/core\";\r\n\r\nimport {sendDownload} from '../../services/Content/File';\r\nimport { FormattedMessage, useIntl } from 'react-intl';\r\nimport { DateTimePicker, MuiPickersUtilsProvider } from \"@material-ui/pickers\";\r\nimport ptLocale from \"date-fns/locale/pt-BR\";\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  labelUp: {\r\n    ...theme.typography.button,\r\n    backgroundColor: theme.palette.background.paper,\r\n    padding: theme.spacing(1),\r\n  },\r\n  input: {\r\n    width: 42,\r\n  },\r\n}));\r\n\r\n\r\nexport default function FilteringAndSetPanel({\r\n  cardsSource, \r\n  configInput,\r\n  tree,\r\n  setTree,\r\n  setConfigFilterCallback\r\n}) {\r\n\r\n  const intl = useIntl();\r\n  const classes = useStyles();\r\n  const [checkedTypes, setCheckedTypes] = React.useState([false, false, false, false]);\r\n  const [percentTrain, setPercentTrain] = React.useState(configInput.percentTrain);\r\n\r\n  const renderSelectTypes = () => {\r\n    let types = [];\r\n\r\n    cardsSource.forEach((item, index) => {\r\n      if(item.get('status') !== 'new' && item.get('category') && item.get('active')){\r\n        for(let a in types){\r\n          if(types[a] === item.get('category')){\r\n            return false;\r\n          }\r\n        }\r\n        types.push(item.get('category'));\r\n      }\r\n    });\r\n    \r\n     return types.map((type, index) => <FormControlLabel key={\"checkfilter\"+index}\r\n        control={<Checkbox \r\n          checked={checkedTypes[index]} \r\n          onChange={() => handleTypeCheck(index)} \r\n          name=\"checkedA\" />}\r\n        label={type}\r\n      />);\r\n  }\r\n\r\n  const renderSimilarityCheck = () => {\r\n    let options = cardsSource.map((item, index) => {\r\n      if(item.get('status') !== 'new'){\r\n        return <option aria-label=\"content\" value={item.get('id')} key={'comparisonOption'+index}>\r\n          {item.get('name')+ '- '+item.get('id')}\r\n        </option>\r\n      }\r\n      return '';\r\n    });\r\n    \r\n    return <Select\r\n            native\r\n            value={configInput.targetCardForComparison}\r\n            onChange={(event) => handleUpdConfig('targetCardForComparison', event.target.value)}\r\n            label=\"targetCardForComparison\"\r\n          >\r\n            <option aria-label=\"\" value=\"\" key={'comparisonOption00'}>\r\n              {/* {intl.formatMessage({id:\"app.FilterAndSetFieldContent\"})} */}\r\n              Não quero comprar fontes\r\n            </option>\r\n            {options}\r\n          </Select>\r\n  }\r\n  const delModelTree = () => {\r\n    setTree({})\r\n  }\r\n\r\n  const downloadModelTree = async () => {\r\n    const name = 'Acc='+tree.accuracy.toString().substr(0,7)+'|Div='+tree.modelTree.percentTrain+'% '+tree.modelTree.date;\r\n    const format = {\"modelTree\": tree};\r\n    await sendDownload(name+'.json', format);\r\n  }\r\n\r\n  const handleTypeCheck = (index) => {\r\n    let newTypes = [...checkedTypes]\r\n    newTypes[index] = !newTypes[index]; \r\n    setCheckedTypes(newTypes)\r\n  }\r\n\r\n  const handleUpdConfig = (key, value) => {\r\n    let newConfigs = {...configInput};\r\n    newConfigs[key] = value;\r\n    setConfigFilterCallback(newConfigs)\r\n  }\r\n\r\n  const handleBlur = () => {\r\n    handleUpdConfig('percentTrain', percentTrain);\r\n    // if (percentTrain < 0) {\r\n    //   setPercentTrain(0);\r\n    // } else if (percentTrain > 100) {\r\n    //   setPercentTrain(100);\r\n    // }\r\n  };\r\n  const handleSliderChange = (event, newValue) => {\r\n    setPercentTrain(newValue);\r\n  };\r\n\r\n  const handleInputChange = (event) => {\r\n    setPercentTrain(event.target.value === '' ? '' : Number(event.target.value));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className={classes.labelUp}>\r\n        <Typography variant=\"h5\" gutterBottom>\r\n          <FormattedMessage id=\"app.FilterAndSetTitle\" />\r\n        </Typography>\r\n      </div>\r\n      <Grid container spacing={1}>\r\n        <Grid item xs={4}>\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            Intervalo de tempo\r\n          </Typography>\r\n          <Grid container spacing={1}>\r\n            <Grid item xs={6}>\r\n              <MuiPickersUtilsProvider utils={DateFnsUtils} locale={ptLocale}>\r\n                <DateTimePicker\r\n                  label=\"Início\"\r\n                  clearable\r\n                  inputVariant=\"outlined\"\r\n                  value={configInput?.minDate}\r\n                  onChange={(event) => handleUpdConfig('minDate', event)}\r\n                  inputProps={{ \r\n                    form: {autocomplete: 'off'}, \r\n                  }}\r\n                />\r\n              </MuiPickersUtilsProvider>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <MuiPickersUtilsProvider utils={DateFnsUtils} locale={ptLocale}>\r\n                <DateTimePicker\r\n                  label=\"Fim\"\r\n                  clearable\r\n                  inputVariant=\"outlined\"\r\n                  value={configInput?.maxDate}\r\n                  onChange={(event) => handleUpdConfig('maxDate', event)}\r\n                  inputProps={{ \r\n                    form: {autocomplete: 'off'}, \r\n                  }}\r\n                />\r\n              </MuiPickersUtilsProvider>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item xs={4}>\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            Tipos de conteúdo permitidos\r\n          </Typography>\r\n          <Grid item xs={12}>\r\n            {renderSelectTypes()}\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item xs={4}>\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            Mínimo de itens no card (0 = sem limite)\r\n          </Typography>\r\n            <TextField \r\n              onChange={(event) => handleUpdConfig('minItemPerCard', event.target.value)}\r\n              id=\"demo-helper-text-aligned-no-helper\" \r\n              label=\"\" \r\n              type=\"number\"\r\n              // fullWidth\r\n              value={configInput?.minItemPerCard}\r\n              inputProps={{ \r\n                  form: {autocomplete: 'off'}, \r\n                  inputMode: 'numeric', \r\n                  pattern: '[0-9]*' \r\n                }}\r\n              variant=\"outlined\"\r\n            />\r\n        </Grid>\r\n        <Grid item xs={4}>\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            Campo usado para processamento\r\n          </Typography>\r\n          <Select\r\n            native\r\n            value={configInput.targetField}\r\n            onChange={(event) => handleUpdConfig('targetField', event.target.value)}\r\n            label=\"targetField\"\r\n          >\r\n            <option aria-label=\"content\" value=\"content\">\r\n              {intl.formatMessage({id:\"app.FilterAndSetFieldContent\"})}\r\n            </option>\r\n            <option aria-label=\"title\" value=\"title\">\r\n              {intl.formatMessage({id:\"app.FilterAndSetFieldTitle\"})}\r\n            </option>\r\n          </Select>\r\n        </Grid>\r\n        <Grid item xs={4}>\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            Fonte usada para comparação\r\n          </Typography>\r\n          <Grid item xs={12}>\r\n            {renderSimilarityCheck()}\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item xs={4}>\r\n        </Grid>\r\n        <Grid item xs={4}>\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            Valor de corte de importância geral\r\n          </Typography>\r\n          <Grid item xs={12}>\r\n            <FilledInput \r\n              onChange={(event) => handleUpdConfig('idfCut', event.target.value)}\r\n              label=\"\" \r\n              type=\"number\"\r\n              // fullWidth\r\n              value={configInput?.idfCut}\r\n              endAdornment={<InputAdornment position=\"end\">%</InputAdornment>}\r\n              inputProps={{ \r\n                form: {autocomplete: 'off'}, \r\n                inputMode: 'numeric',\r\n                max: 100,\r\n                min: 0,\r\n                pattern: '[0-9]*' \r\n              }}\r\n              variant=\"outlined\"\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item xs={4}>\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            Valor de corte para árvore\r\n          </Typography>\r\n          <Grid item xs={12}>\r\n            <FilledInput \r\n              onChange={(event) => handleUpdConfig('treeCut', event.target.value)}\r\n              label=\"\" \r\n              type=\"number\"\r\n              // fullWidth\r\n              value={configInput?.treeCut}\r\n              endAdornment={<InputAdornment position=\"end\">%</InputAdornment>}\r\n              inputProps={{ \r\n                form: {autocomplete: 'off'}, \r\n                inputMode: 'numeric',\r\n                max: 100,\r\n                min: 0,\r\n                pattern: '[0-9]*' \r\n              }}\r\n              variant=\"outlined\"\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item xs={4}>\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            Modelo de Árvore\r\n          </Typography>\r\n          <Grid item xs={12}>\r\n            {Object.keys(tree).length > 0  ? \r\n              <React.Fragment>\r\n                Acc={tree.accuracy.toString().substr(0,7)}\r\n                |Div={tree.modelTree.percentTrain}% \r\n                <br/>\r\n                {tree.modelTree.date}\r\n                <Button variant=\"outlined\" \r\n                  onClick={delModelTree}\r\n                  style={{ margin: '0 5px', color:'red' }}>\r\n                    Del\r\n                </Button>\r\n                <Button variant=\"outlined\" \r\n                  onClick={downloadModelTree}\r\n                  style={{ margin: '0 5px' }}>\r\n                    Download\r\n                </Button>\r\n              </React.Fragment> \r\n              :\r\n              <React.Fragment>\r\n                Vazio\r\n                <Grid container spacing={2} alignItems=\"center\">\r\n                  <Grid item xs={12}>\r\n                    Porcentagem de Treinamento\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    <Slider\r\n                      value={typeof percentTrain === 'number' ? percentTrain : 0}\r\n                      onChange={handleSliderChange}\r\n                      // onBlur={handleBlur}\r\n                      onChangeCommitted={handleBlur}\r\n                      aria-labelledby=\"input-slider\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Input\r\n                      className={classes.input}\r\n                      value={percentTrain}\r\n                      margin=\"dense\"\r\n                      onChange={handleInputChange}\r\n                      onBlur={handleBlur}\r\n                      inputProps={{\r\n                        step: 10,\r\n                        min: 0,\r\n                        max: 100,\r\n                        type: 'number',\r\n                        'aria-labelledby': 'input-slider',\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </React.Fragment>\r\n            }\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  )\r\n}","import React, { useState, useEffect } from 'react';\nimport MainHeader from '../../components/header/MainHeader.jsx';\nimport SourceContents from '../../components/download/SourceContents.jsx';\n\nimport CalcPanel from '../../components/panel/CalcPanel.jsx';\nimport ConfigPanel from '../../components/panel/ConfigPanel.jsx';\nimport TokenizacaoPanel from '../../components/panel/TokenizacaoPanel.jsx';\nimport FilteringAndSetPanel from '../../components/panel/FilteringAndSetPanel.jsx';\n\nimport SourceEntity from '../../entities/SourceEntity'\n\nimport {\n    Divider\n} from \"@material-ui/core\";\n\nexport default function Home() {\n\n\n  const [cardsSource, setCardsSource] = useState([\n    new SourceEntity(),\n  ]);\n\n  const [configFilter, setConfigFilter] = useState({\n    'rssHostDownload1': 'https://api.rss2json.com/v1/api.json',\n    'rssHostParam1'   : 'rss_url',\n    'minItemPerCard'   : 1,\n    'minCharsPerItem'   : 0,\n    'minDate'   : null,\n    'maxDate'   : null,\n    'targetField' : 'content',\n    'targetCardForComparison' : '',\n    'idfCut' : 5,\n    'treeCut' : 0,\n    'percentTrain' : 50\n  });\n\n  const [configToken, setConfigToken] = useState({\n    'divider' : '[-.,;!?\\\\\\(\\)\\\"\\' ]',\n    'ngrams' : 1,\n    'minLength' : 2,\n    'case' : '',\n    'stopWords' : 'fato,de',\n  });\n\n  const [modelTree, setModelTree] = useState({});\n\n  const setConfigFilterCallback = (newConfig) => {\n    setConfigFilter(newConfig)\n  }\n\n  const setCardsSourceCallback = (objCollection) => {\n\n    let newArray = [...objCollection];\n\n    if(newArray.length === 0 || newArray[newArray.length - 1].get('status') !== 'new'){\n      newArray.push(new SourceEntity());\n    }\n\n    setCardsSource(newArray)\n  }\n\n  const setConfigTokenCallback = (data) => {\n    setConfigToken(data)\n  }\n\n  return (\n    <div>\n      <MainHeader/>\n\n      <SourceContents cardsInput={cardsSource} setCardsInput={setCardsSourceCallback}/>\n\n      <Divider variant=\"middle\" />\n\n      <div style={{ backgroundColor: '#D4F1F4'}}>\n        <ConfigPanel \n          configInput={configFilter}\n          modelTree={modelTree}\n          setModelTree={setModelTree}\n          cardsInput={cardsSource} \n          configToken={configToken}\n          setConfigFilterCallback={setConfigFilterCallback} \n          setCardsSourceCallback={setCardsSourceCallback}\n          setConfigTokenCallback={setConfigTokenCallback}\n          />\n      </div>\n      <Divider variant=\"middle\" />\n\n      <TokenizacaoPanel \n        configToken={configToken} \n        callbackLoadData={setConfigTokenCallback}/>\n\n      <Divider variant=\"middle\" />\n\n      <FilteringAndSetPanel \n        cardsSource={cardsSource} \n        configInput={configFilter}\n        setConfigFilterCallback={setConfigFilterCallback} \n        tree={modelTree}\n        setTree={setModelTree}\n        />\n\n      <Divider variant=\"middle\" />\n\n      <div style={{ backgroundColor: '#75E6DA'}}>\n        <CalcPanel \n          modelTree={modelTree}\n          setModelTree={setModelTree}\n          cardsInput={cardsSource} \n          configToken={configToken}\n          configFilter={configFilter}\n        />\n      </div>\n    </div>\n  )\n}","import './App.css';\nimport Home from './pages/index/Home.jsx';\nimport React from \"react\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport {IntlProvider} from 'react-intl';\n\n// import lang_en from './i18n/lang/en.json';\nimport lang_pt_BR from './i18n/lang/pt-BR.json';\n\nconst locale = navigator.language;\n\nReactDOM.render(\n  <React.StrictMode>\n    <IntlProvider locale ={locale} messages={lang_pt_BR}>\n    <App />\n    </IntlProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}